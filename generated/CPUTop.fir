;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit CPUTop : 
  module ProgramCounter : 
    input clock : Clock
    input reset : Reset
    output io : {flip stop : UInt<1>, flip jump : UInt<1>, flip run : UInt<1>, flip programCounterJump : UInt<16>, programCounter : UInt<16>}
    
    reg PCreg : UInt<16>, clock @[ProgramCounter.scala 14:18]
    wire stopRunLogicGate : UInt<1>
    stopRunLogicGate <= UInt<1>("h00")
    node _T = not(io.run) @[ProgramCounter.scala 17:33]
    node _T_1 = or(io.stop, _T) @[ProgramCounter.scala 17:31]
    stopRunLogicGate <= _T_1 @[ProgramCounter.scala 17:20]
    node _T_2 = not(io.run) @[ProgramCounter.scala 22:17]
    node _T_3 = or(io.stop, _T_2) @[ProgramCounter.scala 22:15]
    when _T_3 : @[ProgramCounter.scala 22:26]
      PCreg <= PCreg @[ProgramCounter.scala 23:10]
      skip @[ProgramCounter.scala 22:26]
    else : @[ProgramCounter.scala 24:22]
      when io.jump : @[ProgramCounter.scala 24:22]
        PCreg <= io.programCounterJump @[ProgramCounter.scala 25:10]
        skip @[ProgramCounter.scala 24:22]
      else : @[ProgramCounter.scala 26:14]
        node _T_4 = add(PCreg, UInt<16>("h01")) @[ProgramCounter.scala 27:18]
        node _T_5 = tail(_T_4, 1) @[ProgramCounter.scala 27:18]
        PCreg <= _T_5 @[ProgramCounter.scala 27:11]
        skip @[ProgramCounter.scala 26:14]
    io.programCounter <= PCreg @[ProgramCounter.scala 29:21]
    
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, dataRead : UInt<32>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:20]
    when io.testerEnable : @[DataMemory.scala 20:24]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 22:37]
      io.testerDataRead <= _T @[DataMemory.scala 22:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 23:17]
      when io.testerWriteEnable : @[DataMemory.scala 24:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 26:25]
        skip @[DataMemory.scala 24:32]
      skip @[DataMemory.scala 20:24]
    else : @[DataMemory.scala 28:16]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 30:31]
      io.dataRead <= _T_2 @[DataMemory.scala 30:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 31:23]
      when io.writeEnable : @[DataMemory.scala 32:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 34:19]
        skip @[DataMemory.scala 32:26]
      skip @[DataMemory.scala 28:16]
    
  module ProgramMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, instructionRead : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[ProgramMemory.scala 16:20]
    when io.testerEnable : @[ProgramMemory.scala 18:24]
      read mport _T = memory[io.testerAddress], clock @[ProgramMemory.scala 20:37]
      io.testerDataRead <= _T @[ProgramMemory.scala 20:23]
      io.instructionRead <= UInt<32>("h00") @[ProgramMemory.scala 21:24]
      when io.testerWriteEnable : @[ProgramMemory.scala 22:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[ProgramMemory.scala 24:25]
        skip @[ProgramMemory.scala 22:32]
      skip @[ProgramMemory.scala 18:24]
    else : @[ProgramMemory.scala 26:16]
      read mport _T_2 = memory[io.address], clock @[ProgramMemory.scala 28:38]
      io.instructionRead <= _T_2 @[ProgramMemory.scala 28:24]
      io.testerDataRead <= UInt<32>("h00") @[ProgramMemory.scala 29:23]
      skip @[ProgramMemory.scala 26:16]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip aSel : UInt<4>, flip bSel : UInt<4>, flip writeSel : UInt<4>, flip writeEnable : UInt<1>, flip writeData : UInt<32>, a : UInt<32>, b : UInt<32>}
    
    wire _T : UInt<32>[32] @[RegisterFile.scala 18:34]
    _T[0] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[1] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[2] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[3] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[4] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[5] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[6] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[7] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[8] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[9] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[10] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[11] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[12] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[13] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[14] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[15] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[16] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[17] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[18] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[19] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[20] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[21] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[22] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[23] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[24] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[25] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[26] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[27] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[28] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[29] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[30] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    _T[31] <= UInt<32>("h00") @[RegisterFile.scala 18:34]
    reg registers : UInt<32>[32], clock with : (reset => (reset, _T)) @[RegisterFile.scala 18:26]
    when io.writeEnable : @[RegisterFile.scala 25:23]
      registers[io.writeSel] <= io.writeData @[RegisterFile.scala 26:13]
      skip @[RegisterFile.scala 25:23]
    io.a <= registers[io.aSel] @[RegisterFile.scala 28:8]
    io.b <= registers[io.bSel] @[RegisterFile.scala 29:8]
    
  module ControlUnit : 
    input clock : Clock
    input reset : Reset
    output io : {RegWrite : UInt<1>, done : UInt<1>, flip opcode : UInt<4>, ImJump : UInt<1>, jumpTo : UInt<1>, AluOp : UInt<3>, ImOp : UInt<1>, ImLoad : UInt<1>, MemLoad : UInt<1>, MemWrite : UInt<1>}
    
    io.RegWrite <= UInt<1>("h00") @[ControlUnit.scala 20:15]
    io.done <= UInt<1>("h00") @[ControlUnit.scala 21:11]
    io.ImJump <= UInt<1>("h00") @[ControlUnit.scala 22:13]
    io.jumpTo <= UInt<1>("h00") @[ControlUnit.scala 23:13]
    io.AluOp <= UInt<3>("h00") @[ControlUnit.scala 24:12]
    io.ImOp <= UInt<1>("h00") @[ControlUnit.scala 25:11]
    io.ImLoad <= UInt<1>("h00") @[ControlUnit.scala 26:13]
    io.MemLoad <= UInt<1>("h00") @[ControlUnit.scala 27:14]
    io.MemWrite <= UInt<1>("h00") @[ControlUnit.scala 28:15]
    node _T = eq(UInt<4>("h01"), io.opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 32:19]
      io.done <= UInt<1>("h00") @[ControlUnit.scala 33:15]
      io.ImJump <= UInt<1>("h00") @[ControlUnit.scala 34:17]
      io.jumpTo <= UInt<1>("h00") @[ControlUnit.scala 35:17]
      io.AluOp <= UInt<3>("h00") @[ControlUnit.scala 36:16]
      io.ImOp <= UInt<1>("h00") @[ControlUnit.scala 37:15]
      io.ImLoad <= UInt<1>("h00") @[ControlUnit.scala 38:17]
      io.MemLoad <= UInt<1>("h00") @[ControlUnit.scala 39:18]
      io.MemWrite <= UInt<1>("h00") @[ControlUnit.scala 40:19]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<4>("h02"), io.opcode) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 43:19]
        io.done <= UInt<1>("h00") @[ControlUnit.scala 44:15]
        io.ImJump <= UInt<1>("h00") @[ControlUnit.scala 45:17]
        io.jumpTo <= UInt<1>("h00") @[ControlUnit.scala 46:17]
        io.AluOp <= UInt<3>("h01") @[ControlUnit.scala 47:16]
        io.ImOp <= UInt<1>("h00") @[ControlUnit.scala 48:15]
        io.ImLoad <= UInt<1>("h00") @[ControlUnit.scala 49:17]
        io.MemLoad <= UInt<1>("h00") @[ControlUnit.scala 50:18]
        io.MemWrite <= UInt<1>("h00") @[ControlUnit.scala 51:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<4>("h03"), io.opcode) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.jumpTo <= UInt<1>("h00") @[ControlUnit.scala 55:17]
          io.AluOp <= UInt<3>("h00") @[ControlUnit.scala 56:16]
          io.ImOp <= UInt<1>("h01") @[ControlUnit.scala 57:15]
          io.ImLoad <= UInt<1>("h00") @[ControlUnit.scala 58:17]
          io.MemLoad <= UInt<1>("h00") @[ControlUnit.scala 59:18]
          io.MemWrite <= UInt<1>("h00") @[ControlUnit.scala 60:19]
          io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 61:19]
          io.done <= UInt<1>("h00") @[ControlUnit.scala 62:15]
          io.ImJump <= UInt<1>("h00") @[ControlUnit.scala 63:17]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<4>("h04"), io.opcode) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 66:19]
            io.done <= UInt<1>("h00") @[ControlUnit.scala 67:15]
            io.ImJump <= UInt<1>("h00") @[ControlUnit.scala 68:17]
            io.jumpTo <= UInt<1>("h00") @[ControlUnit.scala 69:17]
            io.AluOp <= UInt<3>("h01") @[ControlUnit.scala 70:16]
            io.ImOp <= UInt<1>("h01") @[ControlUnit.scala 71:15]
            io.ImLoad <= UInt<1>("h00") @[ControlUnit.scala 72:17]
            io.MemLoad <= UInt<1>("h00") @[ControlUnit.scala 73:18]
            io.MemWrite <= UInt<1>("h00") @[ControlUnit.scala 74:19]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<4>("h05"), io.opcode) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 77:19]
              io.done <= UInt<1>("h00") @[ControlUnit.scala 78:15]
              io.ImJump <= UInt<1>("h00") @[ControlUnit.scala 79:17]
              io.jumpTo <= UInt<1>("h00") @[ControlUnit.scala 80:17]
              io.AluOp <= UInt<3>("h05") @[ControlUnit.scala 81:16]
              io.ImOp <= UInt<1>("h01") @[ControlUnit.scala 82:15]
              io.ImLoad <= UInt<1>("h00") @[ControlUnit.scala 83:17]
              io.MemLoad <= UInt<1>("h00") @[ControlUnit.scala 84:18]
              io.MemWrite <= UInt<1>("h00") @[ControlUnit.scala 85:19]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<4>("h06"), io.opcode) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 88:19]
                io.done <= UInt<1>("h00") @[ControlUnit.scala 89:15]
                io.ImJump <= UInt<1>("h00") @[ControlUnit.scala 90:17]
                io.jumpTo <= UInt<1>("h00") @[ControlUnit.scala 91:17]
                io.AluOp <= UInt<3>("h02") @[ControlUnit.scala 92:16]
                io.ImOp <= UInt<1>("h00") @[ControlUnit.scala 93:15]
                io.ImLoad <= UInt<1>("h00") @[ControlUnit.scala 94:17]
                io.MemLoad <= UInt<1>("h00") @[ControlUnit.scala 95:18]
                io.MemWrite <= UInt<1>("h00") @[ControlUnit.scala 96:19]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<4>("h07"), io.opcode) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 99:19]
                  io.done <= UInt<1>("h00") @[ControlUnit.scala 100:15]
                  io.ImJump <= UInt<1>("h00") @[ControlUnit.scala 101:17]
                  io.jumpTo <= UInt<1>("h00") @[ControlUnit.scala 102:17]
                  io.AluOp <= UInt<3>("h04") @[ControlUnit.scala 103:16]
                  io.ImOp <= UInt<1>("h00") @[ControlUnit.scala 104:15]
                  io.ImLoad <= UInt<1>("h00") @[ControlUnit.scala 105:17]
                  io.MemLoad <= UInt<1>("h00") @[ControlUnit.scala 106:18]
                  io.MemWrite <= UInt<1>("h00") @[ControlUnit.scala 107:19]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<4>("h08"), io.opcode) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 110:19]
                    io.done <= UInt<1>("h00") @[ControlUnit.scala 111:15]
                    io.ImJump <= UInt<1>("h00") @[ControlUnit.scala 112:17]
                    io.jumpTo <= UInt<1>("h00") @[ControlUnit.scala 113:17]
                    io.AluOp <= UInt<3>("h00") @[ControlUnit.scala 114:16]
                    io.ImOp <= UInt<1>("h00") @[ControlUnit.scala 115:15]
                    io.ImLoad <= UInt<1>("h01") @[ControlUnit.scala 116:17]
                    io.MemLoad <= UInt<1>("h00") @[ControlUnit.scala 117:18]
                    io.MemWrite <= UInt<1>("h00") @[ControlUnit.scala 118:19]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_8 = eq(UInt<4>("h09"), io.opcode) @[Conditional.scala 37:30]
                    when _T_8 : @[Conditional.scala 39:67]
                      io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 121:19]
                      io.done <= UInt<1>("h00") @[ControlUnit.scala 122:15]
                      io.ImJump <= UInt<1>("h00") @[ControlUnit.scala 123:17]
                      io.jumpTo <= UInt<1>("h00") @[ControlUnit.scala 124:17]
                      io.AluOp <= UInt<3>("h00") @[ControlUnit.scala 125:16]
                      io.ImOp <= UInt<1>("h00") @[ControlUnit.scala 127:15]
                      io.MemWrite <= UInt<1>("h00") @[ControlUnit.scala 128:19]
                      io.ImLoad <= UInt<1>("h00") @[ControlUnit.scala 129:17]
                      io.MemLoad <= UInt<1>("h01") @[ControlUnit.scala 130:18]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_9 = eq(UInt<4>("h0a"), io.opcode) @[Conditional.scala 37:30]
                      when _T_9 : @[Conditional.scala 39:67]
                        io.RegWrite <= UInt<1>("h00") @[ControlUnit.scala 133:19]
                        io.done <= UInt<1>("h00") @[ControlUnit.scala 134:15]
                        io.ImJump <= UInt<1>("h00") @[ControlUnit.scala 135:17]
                        io.ImOp <= UInt<1>("h00") @[ControlUnit.scala 136:15]
                        io.ImLoad <= UInt<1>("h00") @[ControlUnit.scala 137:17]
                        io.MemLoad <= UInt<1>("h00") @[ControlUnit.scala 138:18]
                        io.MemWrite <= UInt<1>("h01") @[ControlUnit.scala 139:19]
                        io.jumpTo <= UInt<1>("h00") @[ControlUnit.scala 140:17]
                        io.AluOp <= UInt<3>("h00") @[ControlUnit.scala 141:16]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_10 = eq(UInt<4>("h0b"), io.opcode) @[Conditional.scala 37:30]
                        when _T_10 : @[Conditional.scala 39:67]
                          io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 145:19]
                          io.jumpTo <= UInt<1>("h00") @[ControlUnit.scala 147:17]
                          io.AluOp <= UInt<3>("h06") @[ControlUnit.scala 148:16]
                          io.ImOp <= UInt<1>("h00") @[ControlUnit.scala 149:15]
                          io.ImLoad <= UInt<1>("h00") @[ControlUnit.scala 150:17]
                          io.MemLoad <= UInt<1>("h00") @[ControlUnit.scala 151:18]
                          io.MemWrite <= UInt<1>("h00") @[ControlUnit.scala 152:19]
                          io.done <= UInt<1>("h00") @[ControlUnit.scala 153:15]
                          io.ImJump <= UInt<1>("h00") @[ControlUnit.scala 154:17]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_11 = eq(UInt<4>("h0c"), io.opcode) @[Conditional.scala 37:30]
                          when _T_11 : @[Conditional.scala 39:67]
                            io.RegWrite <= UInt<1>("h00") @[ControlUnit.scala 159:19]
                            io.ImOp <= UInt<1>("h00") @[ControlUnit.scala 161:15]
                            io.ImLoad <= UInt<1>("h00") @[ControlUnit.scala 162:17]
                            io.MemLoad <= UInt<1>("h00") @[ControlUnit.scala 163:18]
                            io.MemWrite <= UInt<1>("h00") @[ControlUnit.scala 164:19]
                            io.done <= UInt<1>("h00") @[ControlUnit.scala 165:15]
                            io.ImJump <= UInt<1>("h01") @[ControlUnit.scala 166:17]
                            io.jumpTo <= UInt<1>("h01") @[ControlUnit.scala 167:17]
                            io.AluOp <= UInt<3>("h00") @[ControlUnit.scala 168:16]
                            skip @[Conditional.scala 39:67]
                          else : @[Conditional.scala 39:67]
                            node _T_12 = eq(UInt<4>("h0d"), io.opcode) @[Conditional.scala 37:30]
                            when _T_12 : @[Conditional.scala 39:67]
                              io.RegWrite <= UInt<1>("h00") @[ControlUnit.scala 171:19]
                              io.done <= UInt<1>("h00") @[ControlUnit.scala 172:15]
                              io.ImJump <= UInt<1>("h00") @[ControlUnit.scala 173:17]
                              io.jumpTo <= UInt<1>("h01") @[ControlUnit.scala 174:17]
                              io.AluOp <= UInt<3>("h07") @[ControlUnit.scala 175:16]
                              io.ImOp <= UInt<1>("h00") @[ControlUnit.scala 176:15]
                              io.ImLoad <= UInt<1>("h00") @[ControlUnit.scala 177:17]
                              io.MemLoad <= UInt<1>("h00") @[ControlUnit.scala 178:18]
                              io.MemWrite <= UInt<1>("h00") @[ControlUnit.scala 179:19]
                              skip @[Conditional.scala 39:67]
                            else : @[Conditional.scala 39:67]
                              node _T_13 = eq(UInt<4>("h0e"), io.opcode) @[Conditional.scala 37:30]
                              when _T_13 : @[Conditional.scala 39:67]
                                io.RegWrite <= UInt<1>("h00") @[ControlUnit.scala 183:19]
                                io.done <= UInt<1>("h01") @[ControlUnit.scala 184:15]
                                io.ImJump <= UInt<1>("h00") @[ControlUnit.scala 185:17]
                                io.jumpTo <= UInt<1>("h00") @[ControlUnit.scala 186:17]
                                io.AluOp <= UInt<3>("h00") @[ControlUnit.scala 187:16]
                                io.ImOp <= UInt<1>("h00") @[ControlUnit.scala 188:15]
                                io.ImLoad <= UInt<1>("h00") @[ControlUnit.scala 189:17]
                                io.MemLoad <= UInt<1>("h00") @[ControlUnit.scala 190:18]
                                io.MemWrite <= UInt<1>("h00") @[ControlUnit.scala 191:19]
                                skip @[Conditional.scala 39:67]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip sel : UInt<3>, flip input1 : UInt<32>, flip input2 : UInt<32>, output : UInt<32>}
    
    wire output : UInt<32> @[ALU.scala 12:20]
    output <= UInt<1>("h00") @[ALU.scala 14:10]
    node _T = eq(UInt<1>("h00"), io.sel) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = add(io.input1, io.input2) @[ALU.scala 17:33]
      node _T_2 = tail(_T_1, 1) @[ALU.scala 17:33]
      output <= _T_2 @[ALU.scala 17:21]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<1>("h01"), io.sel) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        node _T_4 = sub(io.input1, io.input2) @[ALU.scala 18:32]
        node _T_5 = tail(_T_4, 1) @[ALU.scala 18:32]
        output <= _T_5 @[ALU.scala 18:20]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_6 = eq(UInt<2>("h02"), io.sel) @[Conditional.scala 37:30]
        when _T_6 : @[Conditional.scala 39:67]
          node _T_7 = or(io.input1, io.input2) @[ALU.scala 19:32]
          output <= _T_7 @[ALU.scala 19:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<2>("h03"), io.sel) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            output <= io.input1 @[ALU.scala 20:21]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_9 = eq(UInt<3>("h04"), io.sel) @[Conditional.scala 37:30]
            when _T_9 : @[Conditional.scala 39:67]
              node _T_10 = and(io.input1, io.input2) @[ALU.scala 21:32]
              output <= _T_10 @[ALU.scala 21:20]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_11 = eq(UInt<3>("h05"), io.sel) @[Conditional.scala 37:30]
              when _T_11 : @[Conditional.scala 39:67]
                node _T_12 = mul(io.input1, io.input2) @[ALU.scala 23:33]
                output <= _T_12 @[ALU.scala 23:21]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_13 = eq(UInt<3>("h06"), io.sel) @[Conditional.scala 37:30]
                when _T_13 : @[Conditional.scala 39:67]
                  node _T_14 = add(io.input1, UInt<1>("h01")) @[ALU.scala 24:32]
                  node _T_15 = tail(_T_14, 1) @[ALU.scala 24:32]
                  output <= _T_15 @[ALU.scala 24:20]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_16 = eq(UInt<3>("h07"), io.sel) @[Conditional.scala 37:30]
                  when _T_16 : @[Conditional.scala 39:67]
                    node _T_17 = eq(io.input1, io.input2) @[ALU.scala 25:32]
                    output <= _T_17 @[ALU.scala 25:20]
                    skip @[Conditional.scala 39:67]
    io.output <= output @[ALU.scala 27:12]
    
  module CPUTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {done : UInt<1>, flip run : UInt<1>, flip testerDataMemEnable : UInt<1>, flip testerDataMemAddress : UInt<16>, testerDataMemDataRead : UInt<32>, flip testerDataMemWriteEnable : UInt<1>, flip testerDataMemDataWrite : UInt<32>, flip testerProgMemEnable : UInt<1>, flip testerProgMemAddress : UInt<16>, testerProgMemDataRead : UInt<32>, flip testerProgMemWriteEnable : UInt<1>, flip testerProgMemDataWrite : UInt<32>}
    
    inst programCounter of ProgramCounter @[CPUTop.scala 23:30]
    programCounter.clock <= clock
    programCounter.reset <= reset
    inst dataMemory of DataMemory @[CPUTop.scala 24:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst programMemory of ProgramMemory @[CPUTop.scala 25:29]
    programMemory.clock <= clock
    programMemory.reset <= reset
    inst registerFile of RegisterFile @[CPUTop.scala 26:28]
    registerFile.clock <= clock
    registerFile.reset <= reset
    inst controlUnit of ControlUnit @[CPUTop.scala 27:27]
    controlUnit.clock <= clock
    controlUnit.reset <= reset
    inst alu of ALU @[CPUTop.scala 28:19]
    alu.clock <= clock
    alu.reset <= reset
    programCounter.io.run <= io.run @[CPUTop.scala 31:25]
    programMemory.io.address <= programCounter.io.programCounter @[CPUTop.scala 32:28]
    io.done <= controlUnit.io.done @[CPUTop.scala 33:11]
    programCounter.io.stop <= controlUnit.io.done @[CPUTop.scala 34:26]
    node _T = bits(alu.io.output, 0, 0) @[CPUTop.scala 36:55]
    node jumpAnd = and(controlUnit.io.jumpTo, _T) @[CPUTop.scala 36:40]
    node jumpResult = mux(controlUnit.io.ImJump, controlUnit.io.jumpTo, jumpAnd) @[CPUTop.scala 39:8]
    programCounter.io.jump <= jumpResult @[CPUTop.scala 40:26]
    alu.io.sel <= controlUnit.io.AluOp @[CPUTop.scala 42:14]
    alu.io.input1 <= registerFile.io.a @[CPUTop.scala 43:17]
    node _T_1 = bits(programMemory.io.instructionRead, 15, 0) @[CPUTop.scala 47:37]
    node ImOpMux = mux(controlUnit.io.ImOp, _T_1, registerFile.io.b) @[CPUTop.scala 45:20]
    alu.io.input2 <= ImOpMux @[CPUTop.scala 50:17]
    node _T_2 = bits(programMemory.io.instructionRead, 15, 0) @[CPUTop.scala 54:37]
    node immediateLoadMux = mux(controlUnit.io.ImLoad, _T_2, alu.io.output) @[CPUTop.scala 52:29]
    node MemLoadMux = mux(controlUnit.io.MemLoad, dataMemory.io.dataRead, immediateLoadMux) @[CPUTop.scala 57:23]
    registerFile.io.writeData <= MemLoadMux @[CPUTop.scala 62:29]
    node _T_3 = bits(programMemory.io.instructionRead, 31, 28) @[CPUTop.scala 64:60]
    controlUnit.io.opcode <= _T_3 @[CPUTop.scala 64:25]
    node _T_4 = bits(programMemory.io.instructionRead, 23, 20) @[CPUTop.scala 66:59]
    registerFile.io.aSel <= _T_4 @[CPUTop.scala 66:24]
    node _T_5 = bits(programMemory.io.instructionRead, 19, 16) @[CPUTop.scala 67:59]
    registerFile.io.bSel <= _T_5 @[CPUTop.scala 67:24]
    node _T_6 = bits(programMemory.io.instructionRead, 27, 24) @[CPUTop.scala 68:63]
    registerFile.io.writeSel <= _T_6 @[CPUTop.scala 68:28]
    node _T_7 = bits(programMemory.io.instructionRead, 15, 0) @[CPUTop.scala 69:75]
    programCounter.io.programCounterJump <= _T_7 @[CPUTop.scala 69:40]
    node _T_8 = bits(programMemory.io.instructionRead, 31, 28) @[CPUTop.scala 73:60]
    controlUnit.io.opcode <= _T_8 @[CPUTop.scala 73:25]
    registerFile.io.writeEnable <= controlUnit.io.RegWrite @[CPUTop.scala 74:31]
    dataMemory.io.dataWrite <= registerFile.io.a @[CPUTop.scala 76:27]
    dataMemory.io.address <= registerFile.io.b @[CPUTop.scala 77:25]
    dataMemory.io.writeEnable <= controlUnit.io.MemWrite @[CPUTop.scala 78:29]
    programMemory.io.testerAddress <= io.testerProgMemAddress @[CPUTop.scala 81:34]
    io.testerProgMemDataRead <= programMemory.io.testerDataRead @[CPUTop.scala 82:28]
    programMemory.io.testerDataWrite <= io.testerProgMemDataWrite @[CPUTop.scala 83:36]
    programMemory.io.testerEnable <= io.testerProgMemEnable @[CPUTop.scala 84:33]
    programMemory.io.testerWriteEnable <= io.testerProgMemWriteEnable @[CPUTop.scala 85:38]
    dataMemory.io.testerAddress <= io.testerDataMemAddress @[CPUTop.scala 87:31]
    io.testerDataMemDataRead <= dataMemory.io.testerDataRead @[CPUTop.scala 88:28]
    dataMemory.io.testerDataWrite <= io.testerDataMemDataWrite @[CPUTop.scala 89:33]
    dataMemory.io.testerEnable <= io.testerDataMemEnable @[CPUTop.scala 90:30]
    dataMemory.io.testerWriteEnable <= io.testerDataMemWriteEnable @[CPUTop.scala 91:35]
    
